version: '3.8'

services:
  neo4j:
    image: neo4j:5
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/password
    networks:
      - myriad_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - myriad_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  orchestrator:
    build:
      context: ./src/myriad/services/orchestrator
      dockerfile: Dockerfile
    container_name: myriad-orchestrator
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - GRAPHDB_MANAGER_URL=http://graphdb_manager_ai:5008
      - INPUT_PROCESSOR_URL=http://input_processor:5003
      - OUTPUT_PROCESSOR_URL=http://output_processor:5004
      - ENABLE_DYNAMIC_AGENTS=true
      - ENABLE_AUTONOMOUS_LEARNING=true
      - HTTP_RETRIES=3
      - HTTP_BACKOFF=0.3
      - HTTP_POOL_MAX=20
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      graphdb_manager_ai:
        condition: service_started
    networks:
      - myriad_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  graphdb_manager_ai:
    build:
      context: ./src/myriad/services/graphdb_manager
    container_name: graphdb_manager_ai
    ports:
      - '5008:5008'
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy

  integration_tester_ai:
    build:
      context: ./src/myriad/services/integration_tester
    container_name: integration_tester_ai
    ports:
      - '5009:5009'
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379
      - ORCHESTRATOR_URL=http://orchestrator:5000
    depends_on:
      - orchestrator
      - graphdb_manager_ai
      - lightbulb_definition_ai
      - lightbulb_function_ai
      - redis

  lightbulb_definition_ai:
    build:
      context: ./src/myriad/agents/lightbulb_definition
    ports:
      - '5001:5001'
    container_name: lightbulb_definition_ai
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py

  lightbulb_function_ai:
    build:
      context: ./src/myriad/agents/lightbulb_function
    ports:
      - '5002:5002'
    container_name: lightbulb_function_ai
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app.py

  input_processor:
    build:
      context: ./src/myriad/services/processing/input_processor
    ports:
      - '5003:5003'
    container_name: input_processor
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - FLASK_APP=processing.input_processor.app

  output_processor:
    build:
      context: ./src/myriad/services/processing/output_processor
    ports:
      - '5004:5004'
    container_name: output_processor
    networks:
      - myriad_network
    environment:
      - FLASK_ENV=development
      - FLASK_APP=processing.output_processor.app

volumes:
  neo4j_data:
  redis_data:

networks:
  myriad_network:
    driver: bridge